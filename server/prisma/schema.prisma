// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  email    String @unique

  password       String?
  first_name     String?
  last_name      String?
  avatar         String?
  occupation     String?
  website        String?
  twitter_url    String?
  facebook_url   String?
  instagram_url  String?
  current_stage  String?
  coding_ability String?
  state          String?
  country        String?
  joined_date    DateTime @default(now())

  Posts           Post[]
  Groups          Group[]
  Meetups         Meetup[]
  Podcasts        Podcast[]
  Comment         Comment[]
  Interests       UserInterest[]
  UserGroups      UserGroup[]
  FollowedBy      Follows[]      @relation("following")
  Following       Follows[]      @relation("follower")
  MessageSender   Message[]      @relation("message_sending")
  MessageReceiver Message[]      @relation("message_receiving")
  Likes           PostLikes[]
  CommentLikes    CommentLikes[]
  Notification    Notification[]

  @@map("users")
}

model Post {
  id        Int    @id @default(autoincrement())
  title     String
  content   String
  image_url String
  user_id   Int
  group_id  Int

  view_count Int?      @default(0)
  like_count Int?      @default(0)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  User         User           @relation(fields: [user_id], references: [id])
  Group        Group          @relation(fields: [group_id], references: [id], onDelete: Cascade)
  PostTags     PostTag[]
  Comments     Comment[]
  PostReports  PostReport[]
  Likes        PostLikes[]
  Notification Notification[]

  @@map("posts")
}

model Report {
  id         Int          @id @default(autoincrement())
  reason     String
  username   String
  PostReport PostReport[]

  @@map("reports")
}

model Group {
  id          Int    @id @default(autoincrement())
  name        String
  about       String
  description String
  image_url   String
  logo_url    String
  user_id     Int

  view_count   Int       @default(0)
  member_count Int       @default(1)
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt

  User       User        @relation(fields: [user_id], references: [id])
  UserGroups UserGroup[]
  Posts      Post[]

  @@map("groups")
}

model Meetup {
  id        Int      @id @default(autoincrement())
  name      String
  content   String
  image_url String
  location  String
  date      DateTime
  user_id   Int

  is_fulltime   Boolean   @default(false)
  is_parttime   Boolean   @default(false)
  is_internship Boolean   @default(false)
  is_remote     Boolean   @default(false)
  is_contract   Boolean   @default(false)
  is_free       Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt

  User User @relation(fields: [user_id], references: [id])

  @@map("meetups")
}

model Podcast {
  id             Int    @id @default(autoincrement())
  title          String
  content        String
  artist         String
  episode_number Int
  image_url      String
  audio_url      String
  user_id        Int

  is_indie_bites     Boolean   @default(false)
  is_software_social Boolean   @default(false)
  is_hipnode         Boolean   @default(false)
  is_free            Boolean   @default(false)
  created_at         DateTime  @default(now())
  updated_at         DateTime? @updatedAt

  User User @relation(fields: [user_id], references: [id])

  @@map("podcasts")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  PostTags PostTag[]

  @@map("tags")
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String
  user_id Int
  post_id Int

  reply_id   Int?
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  User         User           @relation(fields: [user_id], references: [id])
  Post         Post           @relation(fields: [post_id], references: [id], onDelete: Cascade)
  Reply        Comment?       @relation("RepliedTo", fields: [reply_id], references: [id])
  Replies      Comment[]      @relation("RepliedTo")
  CommentLikes CommentLikes[]
  Notification Notification[]

  @@map("comments")
}

model Follows {
  id           Int @id @default(autoincrement())
  follower_id  Int
  following_id Int

  Follower  User @relation("follower", fields: [follower_id], references: [id])
  Following User @relation("following", fields: [following_id], references: [id])

  @@unique([follower_id, following_id])
  @@map("user_followers")
}

model UserGroup {
  id       Int     @id @default(autoincrement())
  user_id  Int
  group_id Int
  is_admin Boolean @default(false)

  User  User  @relation(fields: [user_id], references: [id])
  Group Group @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@unique([user_id, group_id])
  @@map("user_groups")
}

model PostTag {
  id      Int @id @default(autoincrement())
  post_id Int
  tag_id  Int

  Tag  Tag  @relation(fields: [tag_id], references: [id])
  Post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([post_id, tag_id])
  @@map("post_tags")
}

model Message {
  id          Int       @id @default(autoincrement())
  content     String
  sender_id   Int
  receiver_id Int
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  Sender   User @relation("message_sending", fields: [sender_id], references: [id])
  Receiver User @relation("message_receiving", fields: [receiver_id], references: [id])

  @@map("messages")
}

model Interest {
  id   Int    @id @default(autoincrement())
  name String

  UserInterests UserInterest[]

  @@map("interests")
}

model UserInterest {
  id          Int @id @default(autoincrement())
  user_id     Int
  interest_id Int

  User     User     @relation(fields: [user_id], references: [id])
  Interest Interest @relation(fields: [interest_id], references: [id])

  @@unique([user_id, interest_id])
  @@map("user_interests")
}

model PostReport {
  id        Int @id @default(autoincrement())
  post_id   Int
  report_id Int

  Report Report @relation(fields: [report_id], references: [id])
  Post   Post   @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([post_id, report_id])
  @@map("post_reports")
}

model PostLikes {
  id      Int @id @default(autoincrement())
  user_id Int
  post_id Int

  User User @relation(fields: [user_id], references: [id])
  Post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id])
  @@map("post_likes")
}

model CommentLikes {
  id         Int @id @default(autoincrement())
  user_id    Int
  comment_id Int

  User    User    @relation(fields: [user_id], references: [id])
  Comment Comment @relation(fields: [comment_id], references: [id])

  @@unique([user_id, comment_id])
  @@map("comment_likes")
}

model Notification {
  id         Int    @id @default(autoincrement())
  type       String
  userId     Int
  fromUserId Int?
  postId     Int?

  commentId Int?
  time      DateTime @default(now())
  isRead    Boolean  @default(false)

  user    User     @relation(fields: [userId], references: [id])
  post    Post?    @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@map("notifications")
}
